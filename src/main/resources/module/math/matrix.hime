(def (matrix m n)
	(def result (list))
	(def temp (list))
	(map (lambda (x)
			(set temp (list-add temp 0)))
		(range 0 (- n 1)))
	(map (lambda (x)
			(set result (list-add result temp)))
		(range 0 (- m 1)))
	result)
(def (matrix-get m x y)
	(list-get (list-get m x) y))
(def (matrix-list-set m x y n)
	(list-set m x (list-set (list-get m x) y n)))
(def (transpose m1)
	(def result (list))
	(def (rsc m)
		(if (is-list (car m))
			(begin
				(set result
					(list-add result (map car m)))
				(rsc (map cdr m)))
			(set result
				(list-add result m))))
	(rsc m1)
	result)
(def (matrix-list-add m1 m2)
	(def result (matrix (len m1) (len (car m1))))
	(map (lambda (i)
			(def temp (list-get result i))
			(map (lambda (j)
					(set temp
						(list-set temp j 
							(+ (matrix-get m1 i j)
							   (matrix-get m2 i j)))))
				(range 0 n))
			(set result (list-set result i temp)))
		(range 0 m))
	result)
(def (matrix-mult m1 m2)
	(def result (def result (matrix (len m1) (len (car m2)))))
	(def p (- (len (car m1)) 1))
	(map (lambda (x)
			(set temp (list-add temp 0)))
		(range 0 n))
	(map (lambda (x)
			(set result (list-add result temp)))
		(range 0 m))
	(map (lambda (i)
			(set temp (list-get result i))
			(map (lambda (j)
				    (def ans 0)
				    (map (lambda (k)
					        (set ans
						       (+ ans
						         (* (matrix-get m1 i k)
							     (matrix-get m2 k j)))))
					    (range 0 p))
				    (set temp (list-set temp j ans)))
				(range 0 n))
			(set result (list-set result i temp)))
		(range 0 m))
	result)
(def (matrix-scalar-mult num m1)
	(def result (list))
	(def temp (list))
	(def m (- (len m1) 1))
	(def n (- (len (car m1)) 1))
	(map (lambda (x)
			(set temp (list-add temp 0)))
		(range 0 n))
	(map (lambda (x)
			(set result (list-add result temp)))
		(range 0 m))
	(map (lambda (i)
			(set temp (list-get result i))
			(map (lambda (j)
					(set temp
						(list-set temp j 
							(* (matrix-get m1 i j) num))))
				(range 0 n))
			(set result (list-set result i temp)))
		(range 0 m))
	result)
(def (calculate-parameter m1)
	(def i 0)
	(def j 0)
	(def line-size (len m1))
	(while (< j (- line-size 1))
		(def line (list-get m1 j))
		(def temp (list-get line j))
		(def templete (list))
		(map (lambda (x)
				(set x (/ x temp))
				(set templete (list-add templete x)))
			line)
		(set m1 (list-set m1 j templete))
		(def flag (+ j 1))
		(while (< flag line-size)
			(def templete1 (list))
			(def temp (matrix-get m1 flag j))
			(def i 0)
			(map (lambda (x1)
					(if (/= x1 0)
						(begin
						    (set x1 (- x1 (* temp (list-get templete i))))
						    (set templete1 (list-add templete1 x1)))
						 (set templete1 (list-add templete1 0)))
					(set i (+ i 1)))
				(list-get m1 flag))
			(set m1 (list-set m1 flag templete1))
			(set flag (+ flag 1)))
		(set j (+ j 1)))
	(def parameters (list))
	(def i (- line-size 1))
	(def flag-j 0)
	(def rol-size (len (list-get m1 0)))
	(def flag-rol (- rol-size 2))
	(while (>= i 0)
		(def operate-line (list-get m1 i))
		(if (= i (- line-size 1))
			(begin
				(def parameter
					(/ (list-get operate-line (- rol-size 1))
					   (list-get operate-line flag-rol)))
				(set parameters (list-add parameters parameter)))
			(begin
				(set flag-j (- rol-size flag-rol 2))
				(def temp2 (list-get operate-line (- rol-size 1)))
				(def result-flag 0)
				(while (> flag-j 0)
					(set temp2
						(- temp2 (* (list-get operate-line (+ flag-rol flag-j))
							(list-get parameters result-flag))))
					(set result-flag (+ result-flag 1))
					(set flag-j (- flag-j 1)))
				(def parameter (/ temp2 (list-get operate-line flag-rol)))
				(set parameters (list-add parameters parameter))))
		(set flag-rol (- flag-rol 1))
		(set i (- i 1)))
	parameters)