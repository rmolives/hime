(def (prime? n)
    (def (divides? a b)
        (= (mod b a) 0))
    (def (find-divisor n test-divisor)
        (cond ((> (sqrt test-divisor) n) n)
            ((divides? test-divisor n) test-divisor)
            (else (find-divisor n (+ test-divisor 1)))))
    (def (smallest-divisor n)
        (find-divisor n 2))
    (= n (smallest-divisor n)))
(def (phi n)
    (def ans n)
    (def i 2)
    (while (<= (* i i) n)
        (if (= (mod n i) 0)
            (begin
                (set ans (* (/ ans i) (- i 1)))
                (while (= (mod n i) 0)
                    (set n (floor (/ n i))))))
        (set i (+ i 1)))
    (if (> n 1)
        (set ans (* (/ ans n) (- n 1)))) ans)
(def (prime-factors n)
    (def result (list))
    (def i 2)
    (while (<= (* i i) n)
        (if (= (mod n i) 0)
            (while (= (mod n i) 0)
                (set n (floor (/ n i)))
                (set result (list-add result i))))
        (set i (+ i 1)))
    (if (> n 1)
        (set result (list-add result n))) result)
(def (exgcd a b)
    (def x 0)
    (def y 0)
    (def (exgcd-in a b)
        (if (= b 0)
            (begin
                (set x 1)
                (set y 0))
            (begin
                (exgcd-in b (mod a b))
                (def z x)
                (set x y)
                (set y (floor (- z (* y (/ a b))))))))
    (exgcd-in a b)
    (list x y))